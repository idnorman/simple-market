---
version: '3'
services:
  # PostgreSQL Setup
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  # MySQL Setup
  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:5.7
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_DATABASE: inventory-service
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_USER: simplemarket
      MYSQL_PASSWORD: simplemarket
    expose:
      - "3306"
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-inventory:/var/lib/mysql
    restart: unless-stopped

  ## MongoDB Setup
  mongo-product:
    container_name: mongo-product
    image: mongo:5.0
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-product:/data/db

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql-keycloak-data:/var/lib/mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_DATABASE: keycloak
      MYSQL_USER: simplemarket
      MYSQL_PASSWORD: simplemarket

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: simplemarket
      DB_PASSWORD: simplemarket
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: idnorman/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: idnorman/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka/
    depends_on:
      - zipkin
      - keycloak
      - discovery-server

  product-service:
    container_name: product-service
    image: idnorman/product-service:latest
    pull_policy: always
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo-product:27017/product-service
      - SPRING_PROFILES_ACTIVE = docker
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka/
    depends_on:
      - mongo-product
      - discovery-server
      - api-gateway

  order-service:
    container_name: order-service
    image: idnorman/order-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE = docker
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:9092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka/
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  inventory-service:
    container_name: inventory-service
    image: idnorman/inventory-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE = docker
      - SPRING_DATASOURCE_URL = jdbc:mysql://mysql-inventory:3306/inventory-service
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka/
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway

  notification-service:
    container_name: notification-service
    image: idnorman/notification-service:latest
    pull_policy: always
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:9092
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka/
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:9.3.6
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password